# Edge for Istio
{{- if eq .Values.cluster.edge.kind "istio" }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: istio-egressgateway
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-egressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-egress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio: egressgateway
    istio.io/rev: default
    operator.istio.io/component: EgressGateways
    release: istio
  name: istio-egressgateway-service-account
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: istio-egressgateway
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-egressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-egress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio: egressgateway
    istio.io/dataplane-mode: none
    istio.io/rev: default
    operator.istio.io/component: EgressGateways
    release: istio
  name: istio-egressgateway
spec:
  selector:
    matchLabels:
      app: istio-egressgateway
      istio: egressgateway
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        istio.io/rev: default
        prometheus.io/path: /stats/prometheus
        prometheus.io/port: "15020"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
      labels:
        app: istio-egressgateway
        app.kubernetes.io/instance: istio
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: istio-egressgateway
        app.kubernetes.io/part-of: istio
        app.kubernetes.io/version: 1.0.0
        chart: gateways
        helm.sh/chart: istio-egress-1.0.0
        heritage: Tiller
        install.operator.istio.io/owning-resource: unknown
        istio: egressgateway
        istio.io/dataplane-mode: none
        istio.io/rev: default
        operator.istio.io/component: EgressGateways
        release: istio
        service.istio.io/canonical-name: istio-egressgateway
        service.istio.io/canonical-revision: latest
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution: null
          requiredDuringSchedulingIgnoredDuringExecution: null
      containers:
      - args:
        - proxy
        - router
        - --domain
        - $(POD_NAMESPACE).svc.cluster.local
        - --proxyLogLevel=warning
        - --proxyComponentLogLevel=misc:error
        - --log_output_level=default:info
        env:
        - name: PILOT_CERT_PROVIDER
          value: istiod
        - name: CA_ADDR
          value: istiod.istio-system.svc:15012
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: ISTIO_CPU_LIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: ISTIO_META_WORKLOAD_NAME
          value: istio-egressgateway
        - name: ISTIO_META_OWNER
          value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-egressgateway
        - name: ISTIO_META_MESH_ID
          value: cluster.local
        - name: TRUST_DOMAIN
          value: cluster.local
        - name: ISTIO_META_UNPRIVILEGED_POD
          value: "true"
        - name: ISTIO_META_CLUSTER_ID
          value: Kubernetes
        - name: ISTIO_META_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: docker.io/istio/proxyv2:1.26.2
        name: istio-proxy
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
        readinessProbe:
          failureThreshold: 30
          httpGet:
            path: /healthz/ready
            port: 15021
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 10m
            memory: 40Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /var/run/secrets/workload-spiffe-uds
          name: workload-socket
        - mountPath: /var/run/secrets/credential-uds
          name: credential-socket
        - mountPath: /var/run/secrets/workload-spiffe-credentials
          name: workload-certs
        - mountPath: /etc/istio/proxy
          name: istio-envoy
        - mountPath: /etc/istio/config
          name: config-volume
        - mountPath: /var/run/secrets/istio
          name: istiod-ca-cert
        - mountPath: /var/run/secrets/tokens
          name: istio-token
          readOnly: true
        - mountPath: /var/lib/istio/data
          name: istio-data
        - mountPath: /etc/istio/pod
          name: podinfo
        - mountPath: /etc/istio/egressgateway-certs
          name: egressgateway-certs
          readOnly: true
        - mountPath: /etc/istio/egressgateway-ca-certs
          name: egressgateway-ca-certs
          readOnly: true
      securityContext:
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      serviceAccountName: istio-egressgateway-service-account
      volumes:
      - emptyDir: {}
        name: workload-socket
      - emptyDir: {}
        name: credential-socket
      - emptyDir: {}
        name: workload-certs
      - configMap:
          name: istio-ca-root-cert
        name: istiod-ca-cert
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
        name: podinfo
      - emptyDir: {}
        name: istio-envoy
      - emptyDir: {}
        name: istio-data
      - name: istio-token
        projected:
          sources:
          - serviceAccountToken:
              audience: istio-ca
              expirationSeconds: 43200
              path: istio-token
      - configMap:
          name: istio
          optional: true
        name: config-volume
      - name: egressgateway-certs
        secret:
          optional: true
          secretName: istio-egressgateway-certs
      - name: egressgateway-ca-certs
        secret:
          optional: true
          secretName: istio-egressgateway-ca-certs
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: istio-egressgateway
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-egressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-egress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio: egressgateway
    istio.io/rev: default
    operator.istio.io/component: EgressGateways
    release: istio
  name: istio-egressgateway
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: istio-egressgateway
      istio: egressgateway
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-egressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-egress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio.io/rev: default
    operator.istio.io/component: EgressGateways
    release: istio
  name: istio-egressgateway-sds
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-egressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-egress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio.io/rev: default
    operator.istio.io/component: EgressGateways
    release: istio
  name: istio-egressgateway-sds
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-egressgateway-sds
subjects:
- kind: ServiceAccount
  name: istio-egressgateway-service-account
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: istio-egressgateway
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-egressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-egress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio: egressgateway
    istio.io/rev: default
    operator.istio.io/component: EgressGateways
    release: istio
  name: istio-egressgateway
spec:
  ports:
  - name: http2
    port: 80
    protocol: TCP
    targetPort: 8080
  - name: https
    port: 443
    protocol: TCP
    targetPort: 8443
  selector:
    app: istio-egressgateway
    istio: egressgateway
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: istio-ingressgateway
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-ingressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-ingress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio: ingressgateway
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: istio-ingressgateway-service-account
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: istio-ingressgateway
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-ingressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-ingress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio: ingressgateway
    istio.io/dataplane-mode: none
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: istio-ingressgateway
spec:
  selector:
    matchLabels:
      app: istio-ingressgateway
      istio: ingressgateway
  strategy:
    rollingUpdate:
      maxSurge: 100%
      maxUnavailable: 25%
  template:
    metadata:
      annotations:
        istio.io/rev: default
        prometheus.io/path: /stats/prometheus
        prometheus.io/port: "15020"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
      labels:
        app: istio-ingressgateway
        app.kubernetes.io/instance: istio
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: istio-ingressgateway
        app.kubernetes.io/part-of: istio
        app.kubernetes.io/version: 1.0.0
        chart: gateways
        helm.sh/chart: istio-ingress-1.0.0
        heritage: Tiller
        install.operator.istio.io/owning-resource: unknown
        istio: ingressgateway
        istio.io/dataplane-mode: none
        istio.io/rev: default
        operator.istio.io/component: IngressGateways
        release: istio
        service.istio.io/canonical-name: istio-ingressgateway
        service.istio.io/canonical-revision: latest
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution: null
          requiredDuringSchedulingIgnoredDuringExecution: null
      containers:
      - args:
        - proxy
        - router
        - --domain
        - $(POD_NAMESPACE).svc.cluster.local
        - --proxyLogLevel=warning
        - --proxyComponentLogLevel=misc:error
        - --log_output_level=default:info
        env:
        - name: PILOT_CERT_PROVIDER
          value: istiod
        - name: CA_ADDR
          value: istiod.istio-system.svc:15012
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: ISTIO_CPU_LIMIT
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: ISTIO_META_WORKLOAD_NAME
          value: istio-ingressgateway
        - name: ISTIO_META_OWNER
          value: kubernetes://apis/apps/v1/namespaces/istio-system/deployments/istio-ingressgateway
        - name: ISTIO_META_MESH_ID
          value: cluster.local
        - name: TRUST_DOMAIN
          value: cluster.local
        - name: ISTIO_META_UNPRIVILEGED_POD
          value: "true"
        - name: ISTIO_META_CLUSTER_ID
          value: Kubernetes
        - name: ISTIO_META_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: docker.io/istio/proxyv2:1.26.2
        name: istio-proxy
        ports:
        - containerPort: 15021
          protocol: TCP
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8443
          protocol: TCP
        - containerPort: 31400
          protocol: TCP
        - containerPort: 15443
          protocol: TCP
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
        readinessProbe:
          failureThreshold: 30
          httpGet:
            path: /healthz/ready
            port: 15021
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 2
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 2000m
            memory: 1024Mi
          requests:
            cpu: 10m
            memory: 40Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /var/run/secrets/workload-spiffe-uds
          name: workload-socket
        - mountPath: /var/run/secrets/credential-uds
          name: credential-socket
        - mountPath: /var/run/secrets/workload-spiffe-credentials
          name: workload-certs
        - mountPath: /etc/istio/proxy
          name: istio-envoy
        - mountPath: /etc/istio/config
          name: config-volume
        - mountPath: /var/run/secrets/istio
          name: istiod-ca-cert
        - mountPath: /var/run/secrets/tokens
          name: istio-token
          readOnly: true
        - mountPath: /var/lib/istio/data
          name: istio-data
        - mountPath: /etc/istio/pod
          name: podinfo
        - mountPath: /etc/istio/ingressgateway-certs
          name: ingressgateway-certs
          readOnly: true
        - mountPath: /etc/istio/ingressgateway-ca-certs
          name: ingressgateway-ca-certs
          readOnly: true
      securityContext:
        runAsGroup: 1337
        runAsNonRoot: true
        runAsUser: 1337
      serviceAccountName: istio-ingressgateway-service-account
      volumes:
      - emptyDir: {}
        name: workload-socket
      - emptyDir: {}
        name: credential-socket
      - emptyDir: {}
        name: workload-certs
      - configMap:
          name: istio-ca-root-cert
        name: istiod-ca-cert
      - downwardAPI:
          items:
          - fieldRef:
              fieldPath: metadata.labels
            path: labels
          - fieldRef:
              fieldPath: metadata.annotations
            path: annotations
        name: podinfo
      - emptyDir: {}
        name: istio-envoy
      - emptyDir: {}
        name: istio-data
      - name: istio-token
        projected:
          sources:
          - serviceAccountToken:
              audience: istio-ca
              expirationSeconds: 43200
              path: istio-token
      - configMap:
          name: istio
          optional: true
        name: config-volume
      - name: ingressgateway-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-certs
      - name: ingressgateway-ca-certs
        secret:
          optional: true
          secretName: istio-ingressgateway-ca-certs
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: istio-ingressgateway
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-ingressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-ingress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio: ingressgateway
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: istio-ingressgateway
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: istio-ingressgateway
      istio: ingressgateway
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-ingressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-ingress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: istio-ingressgateway-sds
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - watch
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-ingressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-ingress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: istio-ingressgateway-sds
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: istio-ingressgateway-sds
subjects:
- kind: ServiceAccount
  name: istio-ingressgateway-service-account
---
---
apiVersion: v1
kind: Service
metadata:
  annotations: null
  labels:
    app: istio-ingressgateway
    app.kubernetes.io/instance: istio
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: istio-ingressgateway
    app.kubernetes.io/part-of: istio
    app.kubernetes.io/version: 1.0.0
    helm.sh/chart: istio-ingress-1.0.0
    install.operator.istio.io/owning-resource: unknown
    istio: ingressgateway
    istio.io/rev: default
    operator.istio.io/component: IngressGateways
    release: istio
  name: istio-ingressgateway
spec:
  ports:
  - name: status-port
    port: 15021
    targetPort: 15021
  - name: http2
    port: 80
    targetPort: 8080
  - name: https
    port: 443
    targetPort: 8443
  - name: tcp
    port: 31400
    targetPort: 31400
  - name: tls
    port: 15443
    targetPort: 15443
  selector:
    app: istio-ingressgateway
    istio: ingressgateway
  type: LoadBalancer
---

{{ if .Values.stack.prometheus.enabled }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: prometheus-cert
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: prometheus-cert
spec:
  secretName: prometheus-cert
  privateKey:
    algorithm: ECDSA
    size: 256
  isCA: false
  dnsNames:
  - {{ .Values.stack.prometheus.fqdn }}
  duration: 2160h
  renewBefore: 360h
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
---
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: prometheus-gw
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: prometheus-gw
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - {{ .Values.stack.prometheus.fqdn }}
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - {{ .Values.stack.prometheus.fqdn }}
    tls:
      mode: SIMPLE
      credentialName: prometheus-cert
---
{{ end }}

{{ if .Values.stack.keycloak.enabled }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: keycloak-cert
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: keycloak-cert
spec:
  secretName: keycloak-cert
  privateKey:
    algorithm: ECDSA
    size: 256
  isCA: false
  dnsNames:
  - {{ .Values.stack.keycloak.fqdn }}
  duration: 2160h
  renewBefore: 360h
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
---
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: keycloak-gw
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: keycloak-gw
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - {{ .Values.stack.keycloak.fqdn }}
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - {{ .Values.stack.keycloak.fqdn }}
    tls:
      mode: SIMPLE
      credentialName: keycloak-cert
---
{{ end }}

{{ if .Values.stack.grafana.enabled }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: grafana-cert
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: grafana-cert
spec:
  secretName: grafana-cert
  privateKey:
    algorithm: ECDSA
    size: 256
  isCA: false
  dnsNames:
  - {{ .Values.stack.grafana.fqdn }}
  duration: 2160h
  renewBefore: 360h
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
---
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: grafana-gw
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: grafana-gw
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - {{ .Values.stack.grafana.fqdn }}
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - {{ .Values.stack.grafana.fqdn }}
    tls:
      mode: SIMPLE
      credentialName: grafana-cert
---
{{ end }}

{{ if .Values.stack.jaeger.enabled }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: jaeger-cert
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: jaeger-cert
spec:
  secretName: jaeger-cert
  privateKey:
    algorithm: ECDSA
    size: 256
  isCA: false
  dnsNames:
  - {{ .Values.stack.jaeger.fqdn }}
  duration: 2160h
  renewBefore: 360h
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
---
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: jaeger-gw
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: jaeger-gw
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - {{ .Values.stack.jaeger.fqdn }}
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - {{ .Values.stack.jaeger.fqdn }}
    tls:
      mode: SIMPLE
      credentialName: jaeger-cert
---
{{ end }}

{{ if .Values.stack.kiali.enabled }}
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kiali-cert
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: kiali-cert
spec:
  secretName: kiali-cert
  privateKey:
    algorithm: ECDSA
    encoding: PKCS1
    size: 384
  isCA: false
  dnsNames:
  - {{ .Values.stack.kiali.fqdn }}
  duration: 2160h
  renewBefore: 360h
  issuerRef:
    name: ca-issuer
    kind: ClusterIssuer
---
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: kiali-gw
  labels:
    {{ include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: kiali-gw
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - {{ .Values.stack.kiali.fqdn }}
    tls:
      httpsRedirect: true
  - port:
      number: 443
      name: https
      protocol: HTTPS
    hosts:
    - {{ .Values.stack.kiali.fqdn }}
    tls:
      mode: SIMPLE
      credentialName: kiali-cert
---
{{ end }}

{{ end }}
