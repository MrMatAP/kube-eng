---
- name: Deploy the stack
  hosts: localhost
  tasks:
  - name: Deploy Prometheus
    when: "stack.prometheus.enabled | bool == true"
    block:
    - name: Create and label the Prometheus namespace
      ansible.builtin.import_role:
        name: mrmat.kube_eng.create_namespace
      vars:
        name: "{{ stack.prometheus.ns }}"
        mesh: "{{ cluster.mesh.kind }}"
    - name: Deploy the Prometheus Helm Chart
      kubernetes.core.helm:
        name: prometheus
        create_namespace: false
        release_namespace: "{{ stack.prometheus.ns }}"
        chart_ref: "{{ chart_prometheus }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: edge-ingress
              ns: "{{ cluster.edge.ns }}"
          fqdn: "{{ stack.prometheus.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"

  - name: Deploy Alloy
    when: "stack.alloy.enabled | bool == true"
    block:
    - name: Create and label the Alloy namespace
      ansible.builtin.import_role:
        name: mrmat.kube_eng.create_namespace
      vars:
        name: "{{ stack.alloy.ns }}"
        mesh: "{{ cluster.mesh.kind }}"
    - name: Deploy the Alloy Helm Chart
      kubernetes.core.helm:
        name: alloy
        create_namespace: false
        release_namespace: "{{ stack.alloy.ns }}"
        chart_ref: "{{ chart_alloy }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: "{{ cluster.edge.name }}"
              ns: "{{ cluster.edge.ns }}"
          fqdn: "{{ stack.alloy.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"

  - name: Deploy Loki
    when: "stack.loki.enabled | bool == true"
    block:
    - name: Create and label the Loki namespace
      ansible.builtin.import_role:
        name: mrmat.kube_eng.create_namespace
      vars:
        name: "{{ stack.loki.ns }}"
        mesh: "{{ cluster.mesh.kind }}"
    - name: Deploy the Loki Helm chart
      kubernetes.core.helm:
        name: loki
        create_namespace: false
        release_namespace: "{{ stack.loki.ns }}"
        chart_ref: "{{ chart_loki }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: "{{ cluster.edge.name }}"
              ns: "{{ cluster.edge.ns }}"
          fqdn: "{{ stack.loki.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"

  - name: Deploy Keycloak
    when: "stack.keycloak.enabled | bool == true"
    block:
    - name: Create and label the Keycloak namespace
      ansible.builtin.import_role:
        name: mrmat.kube_eng.create_namespace
      vars:
        name: "{{ stack.keycloak.ns }}"
        mesh: "{{ cluster.mesh.kind }}"
    - name: Deploy the Keycloak Operator CRDs
      kubernetes.core.k8s:
        src: "{{ item }}"
        namespace: "{{ stack.keycloak.ns }}"
        apply: true
        wait: true
        state: present
      loop:
      - "{{ dist_dir }}/preheat/keycloaks.k8s.keycloak.org-v1.yml"
      - "{{ dist_dir }}/preheat/keycloakrealmimports.k8s.keycloak.org-v1.yml"
    - name: Deploy the Keycloak Operator Helm chart
      kubernetes.core.helm:
        name: kubernetes-operator
        create_namespace: false
        release_namespace: "{{ stack.keycloak.ns }}"
        chart_ref: "{{ chart_keycloak_operator }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: "{{ cluster.edge.name }}"
              ns: "{{ cluster.edge.ns }}"
            fqdn: "{{ stack.keycloak.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
    - name: Create a Keycloak user in PostgreSQL
      community.postgresql.postgresql_user:
        login_host: localhost
        login_port: "{{ host.postgresql.port | int }}"
        login_user: postgres
        login_password: "{{ admin_password }}"
        login_db: postgres
        name: keycloak
        password: "{{ admin_password }}"
        comment: "Keycloak DB User"
        state: present
      environment:
        PGOPTIONS: "-c password_encryption=scram-sha-256"
    - name: Create a database for Keycloak in PostgreSQL
      community.postgresql.postgresql_db:
        login_host: localhost
        login_port: "{{ host.postgresql.port | int }}"
        login_user: postgres
        login_password: "{{ admin_password }}"
        name: keycloak
        owner: keycloak
        comment: "Keycloak Database"
        encoding: UTF-8
        state: present
    - name: Deploy the Keycloak Helm Chart
      kubernetes.core.helm:
        name: keycloak
        create_namespace: false
        release_namespace: "{{ stack.keycloak.ns }}"
        chart_ref: "{{ chart_keycloak }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: "{{ cluster.edge.name }}"
              ns: "{{ cluster.edge.ns }}"
          fqdn: "{{ stack.keycloak.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
          keycloak:
            admin_password: "{{ admin_password }}"
            db_password: "{{ admin_password }}"
            db_host: "{{ host.postgresql.name }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
            db_port: "{{ host.postgresql.port }}"

  - name: Deploy Grafana
    when: "stack.grafana.enabled | bool == true"
    block:
    - name: Create and label the Grafana namespace
      ansible.builtin.import_role:
        name: mrmat.kube_eng.create_namespace
      vars:
        name: "{{ stack.grafana.ns }}"
        mesh: "{{ cluster.mesh.kind }}"
    - name: Register Grafana in Keycloak
      community.general.keycloak_client:
        auth_keycloak_url: "https://{{ stack.keycloak.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
        auth_realm: master
        auth_username: admin
        auth_password: "{{ admin_password }}"
        client_id: "{{ stack.grafana.client_id }}"
        name: "{{ stack.grafana.client_id }}"
        description: "Kube Eng :: Grafana"
        enabled: true
        protocol: openid-connect
        public_client: false
        client_authenticator_type: client-secret
        secret: "{{ admin_password }}"
        root_url: "https://{{ stack.grafana.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}/"
        base_url: "https://{{ stack.grafana.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}/"
        admin_url: "https://{{ stack.grafana.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}/"
        redirect_uris:
        - "https://{{ stack.grafana.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}/login/generic_oauth"
        standard_flow_enabled: true
        implicit_flow_enabled: false
        direct_access_grants_enabled: true
        default_client_scopes:
        - email
        - offline_access
        - profile
        - roles
        # TODO: Make Ansible trust the generated PKI CA certificate
        validate_certs: false
    - name: Register Grafana Viewer role
      community.general.keycloak_role:
        auth_keycloak_url: "https://{{ stack.keycloak.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
        auth_realm: master
        auth_username: admin
        auth_password: "{{ admin_password }}"
        name: Viewer
        description: Grafana Viewers
        client_id: "{{ stack.grafana.client_id }}"
        state: present
        # TODO: Make Ansible trust the generated PKI CA certificate
        validate_certs: false
    - name: Register Grafana Editor role
      community.general.keycloak_role:
        auth_keycloak_url: "https://{{ stack.keycloak.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
        auth_realm: master
        auth_username: admin
        auth_password: "{{ admin_password }}"
        name: Editor
        description: Grafana Editors
        client_id: "{{ stack.grafana.client_id }}"
        state: present
        # TODO: Make Ansible trust the generated PKI CA certificate
        validate_certs: false
    - name: Register Grafana Admin role
      community.general.keycloak_role:
        auth_keycloak_url: "https://{{ stack.keycloak.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
        auth_realm: master
        auth_username: admin
        auth_password: "{{ admin_password }}"
        name: Admin
        description: Grafana Admins
        client_id: "{{ stack.grafana.client_id }}"
        state: present
        # TODO: Make Ansible trust the generated PKI CA certificate
        validate_certs: false
    - name: Install Grafana
      kubernetes.core.helm:
        name: grafana
        create_namespace: false
        release_namespace: "{{ stack.grafana.ns }}"
        chart_ref: "{{ chart_grafana }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: "{{ cluster.edge.name }}"
              ns: "{{ cluster.edge.ns }}"
          fqdn: "{{ stack.grafana.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
          overrides:
            adminUser: "{{ stack.grafana.admin_user }}"
            adminPassword: "{{ admin_password }}"
            envRenderSecret:
              GF_AUTH_GENERIC_OAUTH_CLIENT_ID: "{{ stack.grafana.client_id }}"
              GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET: "{{ admin_password }}"
            grafana.ini:
              server:
                root_url: "https://{{ stack.grafana.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}/"
              auth.generic_oauth:
                auth_url: "https://{{ stack.keycloak.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}/realms/master/protocol/openid-connect/auth"
                token_url: "http://keycloak-service.{{ stack.keycloak.ns }}.svc.cluster.local:8080/realms/master/protocol/openid-connect/token"
                api_url: "http://keycloak-service.{{ stack.keycloak.ns }}.svc.cluster.local:8080/realms/master/protocol/openid-connect/userinfo"
            datasources:
              datasources.yaml:
                apiVersion: 1
                datasources:
                - name: Prometheus
                  type: prometheus
                  url: "http://prometheus.{{ stack.prometheus.ns }}.svc.cluster.local"
                  isDefault: true

  - name: Deploy Jaeger
    when: "stack.jaeger.enabled | bool == true"
    block:
    - name: Create and label the Jaeger namespace
      ansible.builtin.import_role:
        name: mrmat.kube_eng.create_namespace
      vars:
        name: "{{ stack.jaeger.ns }}"
        mesh: "{{ cluster.mesh.kind }}"
    - name: Deploy the Jaeger Helm Chart
      kubernetes.core.helm:
        name: jaeger
        create_namespace: false
        release_namespace: "{{ stack.jaeger.ns }}"
        chart_ref: "{{ chart_jaeger }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: "{{ cluster.edge.name }}"
              ns: "{{ cluster.edge.ns }}"
          fqdn: "{{ stack.jaeger.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
          overrides:
            storage:
              cassandra:
                password: "{{ admin_password }}"


  - name: Deploy Jaeger v2
    when: "stack.jaegerv2.enabled | bool == true"
    block:
    - name: Create and label the Jaeger v2 namespace
      ansible.builtin.import_role:
        name: mrmat.kube_eng.create_namespace
      vars:
        name: "{{ stack.jaegerv2.ns }}"
        mesh: "{{ cluster.mesh.kind }}"
    - name: Deploy the OpenTelemetry Operator
      kubernetes.core.helm:
        name: otel-operator
        create_namespace: false
        release_namespace: "{{ stack.jaegerv2.ns }}"
        chart_ref: open-telemetry/opentelemetry-operator
        wait: true
    - name: Deploy the Jaeger v2 Helm Chart
      kubernetes.core.helm:
        name: jaeger
        create_namespace: false
        release_namespace: "{{ stack.jaegerv2.ns }}"
        chart_ref: "{{ chart_jaeger_v2 }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: "{{ cluster.edge.name }}"
              ns: "{{ cluster.edge.ns }}"
          fqdn: "{{ stack.jaegerv2.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"

  - name: Deploy Kiali
    when: "stack.kiali.enabled | bool == true"
    block:
    - name: Create and label the Kiali namespace
      ansible.builtin.import_role:
        name: mrmat.kube_eng.create_namespace
      vars:
        name: "{{ stack.kiali.ns }}"
        mesh: "{{ cluster.mesh.kind }}"
    - name: Deploy the Kiali Operator
      kubernetes.core.helm:
        name: kiali-operator
        create_namespace: false
        release_namespace: "{{ stack.kiali.ns }}"
        chart_ref: kiali/kiali-operator
        chart_version: "{{ stack.kiali.version }}"
        wait: true
        values:
          cr:
            create: false
    - name: Deploy the Kiali Helm Chart
      kubernetes.core.helm:
        name: kiali
        create_namespace: false
        release_namespace: "{{ stack.kiali.ns }}"
        chart_ref: "{{ chart_kiali }}"
        wait: true
        values:
          cluster:
            edge:
              kind: "{{ cluster.edge.kind }}"
              name: "{{ cluster.edge.name }}"
              ns: "{{ cluster.edge.ns }}"
          fqdn: "{{ stack.kiali.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
          prometheus:
            hostname: "{{ stack.prometheus.hostname }}"
            ns: "{{ stack.prometheus.ns }}"
          jaeger:
            ns: "{{ stack.jaeger.ns }}"
            fqdn: "{{ stack.jaeger.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
          grafana:
            fqdn: "{{ stack.grafana.hostname }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
            ns: "{{ stack.grafana.ns }}"
            auth:
              type: 'basic'
              username: admin
              password: "{{ admin_password }}"
