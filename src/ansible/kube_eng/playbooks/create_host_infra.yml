---
- name: Create and configure the host infrastructure
  hosts: localhost
  tasks:
  - name: Create PKI infrastructure
    block:
    - name: Create a directory for PKI
      ansible.builtin.file:
        path: "{{ pki_dir }}"
        state: directory
    - name: Create a private key for the local CA
      community.crypto.openssl_privatekey:
        path: "{{ pki_dir }}/ca.key"
        type: ECC
        curve: secp256r1
        return_content: true
        state: present
    - name: Generate a CSR for the local CA
      community.crypto.openssl_csr:
        path: "{{ pki_dir }}/ca.csr"
        privatekey_path: "{{ pki_dir }}/ca.key"
        common_name: "{{ cluster_name }} Local CA"
        key_usage_critical: true
        key_usage:
        - keyCertSign
        - cRLSign
        basic_constraints_critical: true
        basic_constraints:
        - "CA:TRUE"
        - "pathlen:1"
    - name: Create a self-signed local CA
      community.crypto.x509_certificate:
        path: "{{ pki_dir }}/ca.pem"
        privatekey_path: "{{ pki_dir }}/ca.key"
        csr_path: "{{ pki_dir }}/ca.csr"
        provider: selfsigned
        return_content: true

  - name: Template the BIND resolver configuration
    ansible.builtin.import_role:
      name: mrmat.kube_eng.bind_configuration
    vars:
      bind_executable: "{{ host_tool_named }}"
      bind_dir: "{{ dist_dir }}/bind"
      forwarders: "{{ host.bind.forwarders }}"
      domain: "{{ cluster_name }}.k8s"
      bind_key: "{{ admin_password }}"

  - name: Template the cloud-provider-kind configuration
    ansible.builtin.import_role:
      name: mrmat.kube_eng.cloud_provider_kind_configuration
    vars:
      cloud_provider_kind_url: "{{ host.cloud_provider_kind.url }}"
      cloud_provider_kind_dir: "{{ dist_dir }}/cloud-provider-kind"

  - name: Template the cloud-provider-mdns configuration
    ansible.builtin.import_role:
      name: mrmat.kube_eng.cloud_provider_mdns_configuration
    vars:
      tool_cloud_provider_mdns: "{{ host_tool_cloud_provider_mdns }}"
      directory: "{{ dist_dir }}/cloud-provider-mdns"
      user: "{{ user_id }}"

  - name: Create a local PostgreSQL database container
    when: host.postgresql.enabled == true
    block:
    - name: Create a volume for PostgreSQL
      community.docker.docker_volume:
        name: "{{ host.postgresql.volume.name }}"
        state: present
    - name: Create a PostgreSQL container
      community.docker.docker_container:
        name: "{{ host.postgresql.name }}"
        image: "{{ host.postgresql.image }}"
        restart: true
        ports:
        - "127.0.0.1:{{ host.postgresql.port | int }}:5432"
        mounts:
        - source: "{{ host.postgresql.volume.name }}"
          target: /var/lib/postgresql/data
        networks:
        - name: kind
          aliases: "{{ host.postgresql.name }}.{{ cluster_name }}.{{ cluster.edge.external_domain }}"
        env:
          POSTGRES_PASSWORD: "{{ admin_password }}"
          PGDATA: /var/lib/postgresql/data
        restart_policy: always
        state: healthy

  - name: Create a local MinIO server, if enabled
    when: host.minio.enabled == true
    block:
    - name: Create a volume for Minio
      community.docker.docker_volume:
        name: "{{ host.minio.volume.name }}"
        state: present
    - name: Create a MinIO container
      community.docker.docker_container:
        name: "{{ host.minio.name }}"
        image: "{{ host.minio.image }}"
        restart: true
        ports:
        - "127.0.0.1:{{ host.minio.port | int }}:9000"
        - "127.0.0.1:{{ host.minio.console.port | int }}:9001"
        mounts:
        - source: "{{ host.minio.volume.name }}"
          target: /data
        networks:
        - name: kind
          aliases: "{{ host.minio.name }}"
        env:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: "{{ admin_password }}"
        command: "server /data --console-address ':9001'"
        restart_policy: always
        state: healthy

  - name: Preheat k8s yaml files for later
    block:
    - name: Create a directory for preheated files
      ansible.builtin.file:
        path: "{{ dist_dir }}/preheat"
        state: directory
    - name: Download the CRD for cert-manager PKI
      ansible.builtin.get_url:
        url: "{{ cluster.pki.crd }}"
        dest: "{{ dist_dir }}/preheat/cert-manager-crds.yaml"
    - name: Download the Gateway-API CRDs
      ansible.builtin.get_url:
        url: "{{ cluster.edge.istio_gateway_api.crd }}"
        dest: "{{ dist_dir }}/preheat/gateway-api-crds.yaml"
    - name: Download the KeyCloak Operator CRDs
      ansible.builtin.get_url:
        url: "https://raw.githubusercontent.com/keycloak/keycloak-k8s-resources/{{ stack.keycloak.operator_version }}/kubernetes/{{ item }}"
        dest: "{{ dist_dir }}/preheat/{{ item }}"
      loop: "{{ stack.keycloak.operator_yaml }}"

  - name: Create an air gapped registry
    when: host.registry.enabled == true
    block:
    - name: Configure the air gapped registry
      ansible.builtin.import_role:
        name: mrmat.kube_eng.registry_configuration
      vars:
        directory: "{{ dist_dir }}/registry"
    - name: Create a private key for the air gapped registry
      community.crypto.openssl_privatekey:
        path: "{{ dist_dir }}/registry/registry.key"
        type: ECC
        curve: secp256r1
        state: present
    - name: Generate a CSR for the air gapped registry
      community.crypto.openssl_csr:
        path: "{{ dist_dir }}/registry/registry.csr"
        privatekey_path: "{{ dist_dir }}/registry/registry.key"
        common_name: "{{ cluster_name }} Registry"
        subject_alt_name:
        - "DNS:{{ host.registry.name }}"
        - "DNS:localhost"
        basic_constraints_critical: true
        basic_constraints:
        - "CA:FALSE"
    - name: Create a self-signed local CA
      community.crypto.x509_certificate:
        path: "{{ dist_dir }}/registry/registry.pem"
        csr_path: "{{ dist_dir }}/registry/registry.csr"
        ownca_path: "{{ pki_dir }}/ca.pem"
        ownca_privatekey_path: "{{ pki_dir }}/ca.key"
        ownca_not_after: "+825d"
        provider: ownca
    - name: Create a volume for the air gapped registry
      community.docker.docker_volume:
        name: "{{ host.registry.volume.name }}"
        state: present
    - name: Create the air gapped OCI registry container
      community.docker.docker_container:
        name: "{{ host.registry.name }}"
        image: "{{ host.registry.image }}"
        restart: true
        mounts:
        - source: "{{ host.registry.volume.name }}"
          target: /data
        - source: "{{ dist_dir }}/registry/config.json"
          target: /etc/zot/config.json
          read_only: true
          type: bind
        - source: "{{ dist_dir }}/registry/registry.key"
          target: /etc/zot/registry.key
          read_only: true
          type: bind
        - source: "{{ dist_dir }}/registry/registry.pem"
          target: /etc/zot/registry.pem
          read_only: true
          type: bind
        ports:
        - "127.0.0.1:{{ host.registry.port | int }}:443"
        networks:
        - name: kind
          aliases: "{{ host.registry.name }}"
        restart_policy: always
        state: started
